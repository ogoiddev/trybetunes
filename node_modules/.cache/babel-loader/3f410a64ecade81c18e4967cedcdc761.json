{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trybetunes/src/Components/MusicCard/index.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong, getFavoriteSongs } from '../../services/favoriteSongsAPI';\nimport Loading from '../../Pages/Loading';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MusicCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSaveFavorites = async _ref => {\n      let {\n        target: {\n          checked\n        }\n      } = _ref;\n      this.setState({\n        isLoading: true\n      });\n      const {\n        trackInfo,\n        handleSetFavoritesPage\n      } = this.props;\n\n      if (!checked) {\n        await removeSong(trackInfo);\n      } else {\n        await addSong(trackInfo);\n      }\n\n      this.handleDataFavorites();\n\n      if (handleSetFavoritesPage) {\n        handleSetFavoritesPage();\n      }\n    };\n\n    this.handleDataFavorites = async () => {\n      this.setState({\n        checkSaveds: await getFavoriteSongs()\n      });\n      this.setState({\n        isLoading: false\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      checkSaveds: []\n    };\n  }\n\n  componentDidMount() {\n    this.handleDataFavorites();\n  }\n\n  render() {\n    const {\n      trackInfo: {\n        previewUrl,\n        key,\n        trackName,\n        trackId\n      }\n    } = this.props;\n    const {\n      isLoading,\n      checkSaveds\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardTrack\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"track-tilhe\",\n        children: trackName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-and-check\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          className: \"play\",\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"favorites\",\n          className: \"checkbox-label\",\n          children: [isLoading ? /*#__PURE__*/_jsxDEV(Loading, {\n            className: \"checkbox-loanding\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 26\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"favorites\",\n            name: \"favorites\",\n            \"data-testid\": `checkbox-music-${trackId}`,\n            type: \"checkbox\",\n            className: \"checkHeart\",\n            checked: checkSaveds.some(track => track.trackId === trackId),\n            onChange: this.handleSaveFavorites\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), \"Favorita\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nMusicCard.propTypes = {\n  trackInfo: PropTypes.shape('n').isRequired\n};","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trybetunes/src/Components/MusicCard/index.jsx"],"names":["React","Component","PropTypes","addSong","removeSong","getFavoriteSongs","Loading","MusicCard","constructor","props","handleSaveFavorites","target","checked","setState","isLoading","trackInfo","handleSetFavoritesPage","handleDataFavorites","checkSaveds","state","componentDidMount","render","previewUrl","key","trackName","trackId","some","track","propTypes","shape","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong, getFavoriteSongs } from '../../services/favoriteSongsAPI';\nimport Loading from '../../Pages/Loading';\nimport './style.css';\n\nexport default class MusicCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      checkSaveds: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleDataFavorites();\n  }\n\n  handleSaveFavorites = async ({ target: { checked } }) => {\n    this.setState({ isLoading: true });\n    const { trackInfo, handleSetFavoritesPage } = this.props;\n    if (!checked) {\n      await removeSong(trackInfo);\n    } else {\n      await addSong(trackInfo);\n    }\n    this.handleDataFavorites();\n    if (handleSetFavoritesPage) {\n      handleSetFavoritesPage();\n    }\n  }\n\n  handleDataFavorites = async () => {\n    this.setState({ checkSaveds: await getFavoriteSongs() });\n    this.setState({ isLoading: false });\n  }\n\n  render() {\n    const { trackInfo: {\n      previewUrl,\n      key,\n      trackName,\n      trackId,\n    } } = this.props;\n    const { isLoading, checkSaveds } = this.state;\n\n    return (\n      <div className=\"cardTrack\" key={ key }>\n        <span className=\"track-tilhe\">{trackName}</span>\n\n        <div className=\"audio-and-check\">\n          <audio\n            className=\"play\"\n            data-testid=\"audio-component\"\n            src={ previewUrl }\n            controls\n          >\n            <track kind=\"captions\" />\n          </audio>\n          <label htmlFor=\"favorites\" className=\"checkbox-label\">\n            {isLoading ? <Loading className=\"checkbox-loanding\" />\n              : (\n                <input\n                  id=\"favorites\"\n                  name=\"favorites\"\n                  data-testid={ `checkbox-music-${trackId}` }\n                  type=\"checkbox\"\n                  className=\"checkHeart\"\n                  checked={ checkSaveds.some((track) => track.trackId === trackId) }\n                  onChange={ this.handleSaveFavorites }\n                />\n              )}\n            Favorita\n          </label>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  trackInfo: PropTypes.shape('n').isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}